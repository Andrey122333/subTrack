name: Docker CI/CD Pipeline

on:
  push:
    branches:
      - laba4
  pull_request:
    branches:
      - laba4

env:
  DOCKER_HUB_REPO: andrey122333
  IMAGE_NAME_BACKEND: sub-server:dev
  IMAGE_NAME_FRONTEND: sub-nginx:latest
  IMAGE_NAME_FRONTEND_TEST: sub-client:test

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build backend image
        run: |
          cd server
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            --target dev \
            -t $DOCKER_HUB_REPO/$IMAGE_NAME_BACKEND \
            --load \
            .

      - name: Build frontend image
        run: |
          cd client
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            -t $DOCKER_HUB_REPO/$IMAGE_NAME_FRONTEND \
            -f Dockerfile.nginx \
            --load \
            .

      - name: Save build cache
        uses: actions/cache/save@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Load backend image
        run: |
          cd server
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --target test \
            -t andrey122333/sub-server:test \
            --load \
            .

      - name: Load frontend test image
        run: |
          cd client
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            -t andrey122333/sub-client:test \
            -f Dockerfile.test \
            --load \
            .

      - name: Start MongoDB for backend tests
        run: |
          docker run -d --name mongo-test \
            -p 27038:27017 \
            -e MONGO_INITDB_ROOT_USERNAME=admin \
            -e MONGO_INITDB_ROOT_PASSWORD=password \
            mongo:6.0
          
          # Ожидание готовности MongoDB
          for i in {1..30}; do
            if docker run --rm --network container:mongo-test mongo:6.0 \
              mongo --eval 'db.runCommand("ping").ok' --quiet; then
              break
            fi
            sleep 1
          done

      - name: Run backend tests with coverage
        run: |
          cd server
          docker build --target test -t backend-test .
          docker run --rm \
            --name backend-test-container \
            --link mongo-test:mongo-test \
            -e MONGO_URI="mongodb://admin:password@mongo-test:27017/subscriptions_test?authSource=admin" \
            backend-test

      - name: Run frontend tests with coverage
        run: |
          cd client
          docker build -t $DOCKER_HUB_REPO/$IMAGE_NAME_FRONTEND_TEST -f Dockerfile.test .
          docker run --rm $DOCKER_HUB_REPO/$IMAGE_NAME_FRONTEND_TEST

      - name: Upload combined coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage
          path: |
            server/coverage/lcov.info
            client/coverage/lcov.info

      - name: Cleanup MongoDB
        if: always()
        run: |
          docker stop mongo-test || true
          docker rm mongo-test || true


  sonarqube:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: combined-coverage
          path: server/coverage

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd server
          npm install

      - name: Install SonarCloud Scanner
        run: npm install -g sonarqube-scanner

      - name: Run SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd server
          sonar-scanner \
            -Dsonar.projectKey=subTrack \
            -Dsonar.organization=andrey122333 \
            -Dsonar.sources=. \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info,../client/coverage/lcov.info \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=300



  push:
    needs: [build, test, sonarqube]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Load backend image
        run: |
          cd server
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --target dev \
            -t $DOCKER_HUB_REPO/$IMAGE_NAME_BACKEND \
            --load \
            .

      - name: Load frontend image
        run: |
          cd client
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            -t $DOCKER_HUB_REPO/$IMAGE_NAME_FRONTEND \
            -f Dockerfile.nginx \
            --load \
            .

      - name: Login to Docker Hub
        uses: docker/login-action@v4
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Push backend image
        run: docker push $DOCKER_HUB_REPO/$IMAGE_NAME_BACKEND

      - name: Push frontend image
        run: docker push $DOCKER_HUB_REPO/$IMAGE_NAME_FRONTEND